// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: quiz.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Quiz_Play_FullMethodName = "/quiz.v1.Quiz/Play"
)

// QuizClient is the client API for Quiz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizClient interface {
	Play(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMsg, ServerMsg], error)
}

type quizClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizClient(cc grpc.ClientConnInterface) QuizClient {
	return &quizClient{cc}
}

func (c *quizClient) Play(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMsg, ServerMsg], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Quiz_ServiceDesc.Streams[0], Quiz_Play_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMsg, ServerMsg]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quiz_PlayClient = grpc.BidiStreamingClient[ClientMsg, ServerMsg]

// QuizServer is the server API for Quiz service.
// All implementations must embed UnimplementedQuizServer
// for forward compatibility.
type QuizServer interface {
	Play(grpc.BidiStreamingServer[ClientMsg, ServerMsg]) error
	mustEmbedUnimplementedQuizServer()
}

// UnimplementedQuizServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizServer struct{}

func (UnimplementedQuizServer) Play(grpc.BidiStreamingServer[ClientMsg, ServerMsg]) error {
	return status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedQuizServer) mustEmbedUnimplementedQuizServer() {}
func (UnimplementedQuizServer) testEmbeddedByValue()              {}

// UnsafeQuizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServer will
// result in compilation errors.
type UnsafeQuizServer interface {
	mustEmbedUnimplementedQuizServer()
}

func RegisterQuizServer(s grpc.ServiceRegistrar, srv QuizServer) {
	// If the following call pancis, it indicates UnimplementedQuizServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Quiz_ServiceDesc, srv)
}

func _Quiz_Play_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuizServer).Play(&grpc.GenericServerStream[ClientMsg, ServerMsg]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Quiz_PlayServer = grpc.BidiStreamingServer[ClientMsg, ServerMsg]

// Quiz_ServiceDesc is the grpc.ServiceDesc for Quiz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quiz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.v1.Quiz",
	HandlerType: (*QuizServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Play",
			Handler:       _Quiz_Play_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "quiz.proto",
}
